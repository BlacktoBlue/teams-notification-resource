#!/bin/bash

CURL_OPTION="-v -f"

set -e

cd "${1}"

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$(mktemp /tmp/resource-in.XXXXXX)
actions_file=$(mktemp /tmp/actions.XXXXXX)
cat > "${payload}" <&0

debug="$(jq -r '.params.debug // "false"' < "${payload}")"
if [[ "${debug}" == "true" ]]
then
  set -x
fi

timestamp="$(jq -n "{version:{timestamp:\"$(date +%s)\"}}")"

disable="$(jq -r '.source.disable' < "${payload}")"
if [[ "${disable}" == "true" ]]
then
#    echo "$timestamp" >&3
    exit 0
fi

webhook_url="$(jq -r '.source.url' < "${payload}")"
allow_insecure="$(jq -r '.source.insecure // "false"' < "${payload}")"
raw_ca_certs=$(jq -r '.source.ca_certs // []' < $payload)

color="$(jq -r '.params.color // "00EA43"' < "${payload}")"
text_file="$(jq -r '.params.text_file // ""' < "${payload}")"
text="$(jq -r '(.params.text // "${TEXT_FILE_CONTENT}")' < "${payload}")"
icon_url="$(jq -r '(.params.icon_url // null)' < "${payload}")"
build_status="$(jq -r '(.params.build_status // null)' < "${payload}")"
title="$(jq -r '.params.title // "Concourse CI"' < "${payload}")"
activitySubtitle="$(jq -r '.params.activitySubtitle // ""' < "${payload}")"
facts="$(jq -r '.params.facts // []' < "${payload}")"
potentialAction="$(jq -r '.params.potentialAction // []' < "${payload}")"

proxy="$(jq -r '.source.proxy // "null"' < "${payload}")"
proxy_https_tunnel="$(jq -r '.source.proxy_https_tunnel // "false"' < "${payload}")"

# Read the env_file and export it in the current console
env_file="$(jq -r '.params.env_file // ""' < "${payload}")"
if [ -f "$env_file" ]; then
  # export key=value, when value as space but no quotes
  search_key_val='(\w+)=([^\n]+)'

  source <(sed -E -n -r "s/$search_key_val/export \1=\"\2\"/ p" "$env_file")
fi

cert_count="$(echo $raw_ca_certs | jq -r '. | length')"
if [[ ${cert_count} -gt 0 ]]
then
  cert_dir="/usr/local/share/ca-certificates/"
  mkdir -p "$cert_dir"
  for i in $(seq 0 $(expr "$cert_count" - 1));
  do
    echo $raw_ca_certs | jq -r .[$i].cert >> "${cert_dir}/ca-cert-$(echo $raw_ca_certs | jq -r .[$i].domain).crt"
  done
  update-ca-certificates
fi

export TEXT_FILE_CONTENT=""
[[ -n "${text_file}" && ! -f "${text_file}" ]] && text_file=""
[[ -n "${text_file}" && -f "${text_file}" ]] && TEXT_FILE_CONTENT="$(cat "${text_file}")"

text=$(echo -n "$text" | envsubst)
text_interpolated=$(echo -n "$text" |envsubst)
facts=$(echo -n "$facts" | envsubst)

text_interpolated="$(echo "${text_interpolated}" | jq -r -R -s .)"
text_interpolated="${text_interpolated//$'\n'/"\\n\\n"}"

potentialAction=$(echo -n "$potentialAction" | envsubst)

actionName=$(echo -n "$actionName" | envsubst)
actionTarget=$(echo -n "$actionTarget" | envsubst)
title=$(echo -n "$title" | envsubst)
activitySubtitle=$(echo -n "$activitySubtitle" | envsubst)

activityTitle=$(echo ${BUILD_PIPELINE_NAME}/${BUILD_JOB_NAME}/${BUILD_NAME} - ${build_status})

body="$(cat <<EOF
{
	"@type": "MessageCard",
	"@context": "https://schema.org/extensions",
	"summary": "Concourse CI",
	"themeColor": "${color}",
	"title": "${title}",
	"sections": [
		{
			"activityTitle": "${activityTitle}",
			"activitySubtitle": "$(date)",
			"activityImage": "${icon_url}",
			"facts": ${facts},
			"text": "${text_interpolated}"
		}
	],
	"potentialAction": ${potentialAction}
}
EOF
)"



redacted_webhook_url=$(echo "${webhook_url}" | sed -e 's#/\([^/\.]\{2\}\)[^/.]\{5,\}\([^/.]\{2\}\)#/\1â€¦\2#g' | jq -R .)

url_path="$(echo ${webhook_url} | sed -e "s/https\{0,1\}:\/\/[^\/]*\(\/[^?&#]*\).*/\1/")"
curl ${CURL_OPTION} -d "${body}" "${webhook_url}" 2>&1 | sed -e "s#${url_path}#***WEBHOOK URL REDACTED***#g"

timestamp=$(date +%s)
metadata="$(cat <<EOF
{
  "version": {"timestamp": "${timestamp}"},
  "metadata": [
    {"name": "url", "value": ${redacted_webhook_url}},
    {"name": "actionName", "value": "${actionName}"},
    {"name": "actionTarget", "value": "${actionTarget}"},
    {"name": "BUILD_PIPELINE_NAME", "value": "${BUILD_PIPELINE_NAME}"}
  ]
}
EOF
)"

echo "$metadata" >&3